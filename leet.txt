//all leetcode submit;

1.
class Solution {
public:
    int find(vector<int> a, int t){
        for(int i = 0; i < a.size(); i++){
            if(a[i] == t) return i;
        }
        return -1;
    }
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> res;
        for(int i = 0; i < nums.size(); i++){
            vector<int> a(1, i);
            int ff = find(nums, target - nums[i]);
            if(ff != -1 && ff != i){
                a.push_back(ff);
                return a;
            }
        }
        return res;
    }
};

2.
class Solution {
public:
    vector<int> getConcatenation(vector<int>& nums) {
        int length = nums.size();
        for(int i = 0; i < length; i++) nums.push_back(nums[i]);
        return nums;
    }
};

3.
class Solution {
public:
    bool check(string s){
        int l = 0, r = s.size() - 1;
        while(l < r){
            if(s[l] != s[r]) return false;
            l += 1;
            r -= 1;
        }
        return true;
    }
    bool isPalindrome(int x) {
        if(x < 0) x *= 1;
        string s = to_string(x);
        if(check(s)) return true;
        return false;
    }
};

4.
class Solution {
public:
    string longestCommonPrefix(vector<string>& ss) {
        int minVal = 1000;
        for(int i = 0; i < ss.size(); i++){
            if(ss[i].size() < minVal) minVal = ss[i].size();
        }
        string a = "";
        int st = 0;
        bool find = false;     
        for(int i = 0; i < minVal; i++){
            int count = 0;
            for(int j = 1; j < ss.size(); j++){
                if(ss[j][i] == ss[0][i]) count += 1;
            }
            if(count == ss.size() - 1){
                a += ss[0][i];
            }else find = true;
            if(find == true) break;
        }  
        return a;
    }
};

5.
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        vector<int> a;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] != val) a.push_back(nums[i]);
        }
        nums = a;
        return a.size();
    }
};

6.
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        for(int i = 1; i < nums.size(); i++){
            if(nums[i] == nums[i - 1]) return true;
        }
        return false;
    }
};

7.
class Solution {
public:
    vector<int> buildArray(vector<int>& nums) {
        vector<int> a;
        for(int i = 0; i < nums.size(); i++){
            a.push_back(nums[nums[i]]);
        }
        return a;
    }
};

8.
class Solution {
public:
    int numberOfEmployeesWhoMetTarget(vector<int>& h, int t) {
        int c = 0;
        for(int i = 0; i < h.size(); i++){
            if(h[i] > t - 1) c += 1;
        }
        return c;
    }
};

9.
class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {
        vector<int> a;
        for(int i = 0; i < n; i++){
            a.push_back(nums[i]);
            a.push_back(nums[i + n]);
        }
        return a;
    }
};

10.
class Solution {
public:
    int finalValueAfterOperations(vector<string>& o) {
        int c = 0;
        for(int i = 0; i < o.size(); i++){
            if(o[i][1] == '+'){
                c += 1;
            }else c -= 1;
        }
        return c;
    }
};

11.
class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        int c = 0;
        for(int i = 0; i < nums.size() - 1; i++){
            for(int j = i + 1; j < nums.size(); j++){
                if(nums[i] == nums[j]) c += 1;
            }
        }
        return c;
    }
};

12.
class Solution {
public:
    vector<bool> kidsWithCandies(vector<int>& c, int ex) {
        vector<bool> ccc(c.size(), false);
        int maxVal = *max_element(c.begin(), c.end());
        for(int i = 0; i < c.size(); i++){
            if(c[i] + ex >= maxVal) ccc[i] = true;
        }
        return ccc;
    }
};

13.
class Solution {
public:
    int maximumWealth(vector<vector<int>>& ac) {
        int maxVal = -1;
        for(int i = 0; i < ac.size(); i++){
            int cc = 0;
            for(int j = 0; j < ac[i].size(); j++){
                cc += ac[i][j];
            }
            if(cc > maxVal) maxVal = cc;
        }
        return maxVal;
    }
};

14.
class Solution {
public:
    vector<int> runningSum(vector<int>& nums) {
        for(int i = 1; i < nums.size(); i++){
            nums[i] += nums[i - 1];
        }
        return nums;
    }
};

15.
class Solution {
public:
    int mostWordsFound(vector<string>& ss) {
        int maxVal = -1;
        for(int i = 0; i < ss.size(); i++){
            int c = 0;
            for(int j = 0; j < ss[i].size(); j++){
                if(ss[i][j] == ' ') c += 1;
            }
            if(c > maxVal) maxVal = c;
        }
        return maxVal + 1;
    }
};

16.
class Solution {
public:
    int count(vector<int> a, int index){
        int cnt = 0;
        for(int i = 0; i < a.size(); i++){
            if(i != index and a[i] < a[index]) cnt += 1;
        }
        return cnt;
    }
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
        vector<int> a;
        for(int i = 0; i < nums.size(); i++) a.push_back(count(nums, i));
        return a;
    }
};

17.
class Solution {
public:
    int sumOfMultiples(int n) {
        int s = 0;
        for(int i = 1; i < n + 1; i++){
            if(i % 3 == 0 || i % 5 == 0 || i %  7 == 0) s += i;
        }
        return s;
    }
};

18.
class Solution {
public:
    string restoreString(string s, vector<int>& indices) {
        string res = "";
        char a[indices.size()];
        for(int i = 0; i < indices.size(); i++) a[indices[i]] = s[i];
        for(int i = 0; i < s.size(); i++) res += a[i];
        return res;
    }
};

19.
class Solution {
public:
    bool arrayStringsAreEqual(vector<string>& word1, vector<string>& word2) {
        string a = "", b = "";
        for(int i = 0; i < word1.size(); i++) a += word1[i];
        for(int i = 0; i < word2.size(); i++) b += word2[i];
        return a == b;
    }
};

20.
class Solution {
public:
    int count(int n){
        int s = 0;
        while(n != 0){
            s += n % 10;
            n /= 10;
        }
        return s;
    }
    int differenceOfSum(vector<int>& nums) {
        int cnt = 0;
        for(int i = 0; i < nums.size(); i++) cnt += abs(nums[i] - count(nums[i]));
        return cnt;
    }
};

21.
class Solution {
public:
    int sumOddLengthSubarrays(vector<int>& arr) {
        int res = 0, st = 1;
        while(st <= arr.size()){
            for(int i = 0; i + st <= arr.size(); i++){
                for(int j = i; j < i + st; j++) res += arr[j];
            }
            st += 2;
        }
        return res;
    }
};

22.
class Solution {
public:
    string truncateSentence(string s, int k) {
        string a = "";
        int count = 0, st = 0;
        while(st < s.size() and count < k){
            if(s[st] == ' '){
                count += 1;
                if(count == k){
                    break;
                }else{
                    a += ' ';
                    st += 1;
                }
            }else{
                a += s[st];
                st += 1;
            }
        }
        return a;
    }
};

23.
class Solution {
public:
    int countKDifference(vector<int>& nums, int k) {
        int c = 0;
        for(int i = 0; i < nums.size() - 1; i++){
            for(int j = i + 1; j < nums.size(); j++){
                if(abs(nums[i] - nums[j]) == k) c += 1;
            }
        }
        return c;
    }
};

24.
class Solution {
public:
    int largestAltitude(vector<int>& gain) {
        vector<int> res(1, 0);
        for(int i = 0; i < gain.size(); i++) res.push_back(res[res.size() - 1] + gain[i]);
        int maxVal = *max_element(res.begin(), res.end());
        return maxVal;
    }
};

25.
class Solution {
public:
    int maximumNumberOfStringPairs(vector<string>& words) {
        vector<int> dp(words.size(), 0);
        int cnt = 0;
        for(int i = 0; i < words.size() - 1; i++){
            for(int j = i + 1; j < words.size(); j++){
                if(dp[i] != -1 and dp[j] != -1){
                    if(words[i][1] == words[j][0] and words[i][0] == words[j][1]){
                        cnt += 1;
                        dp[i] = -1;
                        dp[j] = -1;
                    }
                }
            }
        }
        return cnt;
    }
};

26.
class Solution {
public:
    int minMovesToSeat(vector<int>& seats, vector<int>& students) {
        int cnt = 0;
        sort(seats.begin(), seats.end());
        sort(students.begin(), students.end());
        for(int i = 0; i < seats.size(); i++) cnt += abs(seats[i] - students[i]);
        return cnt;
    }
};

27.
class Solution {
public:
    int arrayPairSum(vector<int>& nums) {
        int count = 0;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size(); i += 2) count += nums[i];
        return count;
    }
};

28.
class Solution {
public:
    bool find(char c, char cc[], int length){
        for(int i = 0; i < length; i++){
            if(cc[i] == c) return true;
        }
        return false;
    }
    int countConsistentStrings(string allowed, vector<string>& words) {
        int cnt = 0;
        char pos[allowed.size()];
        for(int i = 0; i < allowed.size(); i++) pos[i] = allowed[i];
        for(int i = 0; i < words.size(); i++){
            int count = 0;
            for(int j = 0; j < words[i].size(); j++){
                if(find(words[i][j], pos, allowed.size()) == false) count += 1;
            }
            if(count == 0) cnt += 1;
        }
        return cnt;
    }
};

29.
class Solution {
public:
    vector<string> sortPeople(vector<string>& names, vector<int>& heights) {
        int length = names.size();
        for(int i = 0; i < length; i++){
            for(int j = 0; j < length - i - 1; j++){
                if(heights[j] < heights[j + 1]){
                    int tmp = heights[j];
                    heights[j] = heights[j + 1];
                    heights[j + 1] = tmp;
                    string temp = names[j];
                    names[j] = names[j + 1];
                    names[j + 1] = temp;
                }
            }
        }
        return names;
    }
};

30.
class Solution {
public:
    int diagonalSum(vector<vector<int>>& mat) {
        int cnt = 0;
        for(int i = 0; i < mat.size(); i++) cnt += mat[i][i];
        int x = 0, y = mat.size() - 1;
        while(x < mat.size()){
            cnt += mat[x][y];
            x += 1;
            y -= 1;
        }
        if(mat.size() % 2 != 0) cnt -= mat[mat.size() / 2][mat.size() / 2];
        return cnt;

    }
};

31.
class Solution {
public:
    int heightChecker(vector<int>& r) {
        vector<int> c = r;
        sort(c.begin(), c.end());
        int cnt = 0;
        for(int i = 0; i < r.size(); i++){
            if(r[i] != c[i]) cnt += 1;
        }
        return cnt;
    }
};

32.
class Solution {
public:
    int maximizeSum(vector<int>& nums, int n) {
        sort(nums.begin(), nums.end());
        return nums[nums.size() - 1] * n + ((n * (n + 1)) / 2) - n;
    }
};

33.
class Solution {
public:
    vector<int> createTargetArray(vector<int>& nums, vector<int>& index) {
        vector<int> a;
        for(int i = 0; i < nums.size(); i++){
            int value = nums[i], pos = index[i];
            if(a.size() < pos){
                a.push_back(value);
            }else a.insert(a.begin() + pos, value);
        }
        return a;
    }
};

34.
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        return (nums[nums.size() - 1] - 1)*(nums[nums.size() - 2] - 1);
    }
};

35.
class Solution {
public:
    vector<vector<int>> largestLocal(vector<vector<int>>& grid) {
        int length = grid.size();
        vector<vector<int>> res(length - 2, vector<int> (length - 2));
        for(int i = 0; i < length - 2; i++){
            for(int j = 0; j < length - 2; j++){
                res[i][j] = 0;
                for(int s1 = i; s1 < i + 3; s1++){
                    for(int s2 = j; s2 < j + 3; s2++){
                        res[i][j] = max(res[i][j], grid[s1][s2]);
                    }
                }
            }
        }
        return res;
    }
};

36.
class Solution {
public:
    int similarPairs(vector<string>& words) {
        vector<set<char>> ss;
        int cnt = 0;
        for(int i = 0; i < words.size(); i++){
            set<char> s;
            for(int j = 0; j < words[i].size(); j++){
                s.insert(words[i][j]);
            }
            ss.push_back(s);
        }
        for(int i = 0; i < ss.size() - 1; i++){
            for(int j = i + 1; j < ss.size(); j++){
                if(ss[i] == ss[j]) cnt += 1;
            }
        }
        return cnt;
    }
};

37.
class Solution {
public:
    int change(char c){
        if(c == '0') return 0;
        if(c == '1') return 1;
        if(c == '2') return 2;
        if(c == '3') return 3;
        if(c == '4') return 4;
        if(c == '5') return 5;
        if(c == '6') return 6;
        if(c == '7') return 7;
        if(c == '8') return 8;
        if(c == '9') return 9;
        return -1;
    }
    int countSeniors(vector<string>& details) {
        int cnt = 0;
        for(int i = 0; i < details.size(); i++){
            int age = 10*change(details[i][11]) + change(details[i][12]);
            if(age > 60) cnt += 1;
        }
        return cnt;
    }
};

38.
class Solution {
public:
    int countMatches(vector<vector<string>>& items, string ruleKey, string ruleValue) {
        int cnt = 0;
        int check;
        if(ruleKey == "type"){
            check = 0;
        }else if(ruleKey == "color"){
            check = 1;
        }else check = 2;
        for(int i = 0; i < items.size(); i++){
            if(items[i][check] == ruleValue) cnt += 1;
        }
        return cnt;
    }
};

39.
class Solution {
public:
    bool dup(string s){
        int l = 0, r = s.size() - 1;
        while(l < r){
            if(s[l] != s[r]) return false;
            l += 1;
            r -= 1;
        }
        return true;
    }
    string firstPalindrome(vector<string>& words) {
        for(int i = 0; i < words.size(); i++){
            if(dup(words[i])) return words[i];
        }
        string a = "";
        return a;
    }
};

40.
class Solution {
public:
    bool check(char c){
        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') return true;
        return false;
    }
    int vowelStrings(vector<string>& words, int left, int right) {
        int cnt = 0;
        for(int i = left; i < right + 1; i++){
            string word = words[i];
            if(check(word[0]) == true and check(word[word.size() - 1]) == true) cnt += 1;
        }
        return cnt;
    }
};

41.
class Solution {
public:
    bool check(vector<char> t){
        for(int i = 0; i < t.size() - 1; i++){
            if(t[i] > t[i + 1]) return false;
        }
        return true;
    }
    int minDeletionSize(vector<string>& strs) {
        int cnt = 0, col = strs[0].size();
        for(int i = 0; i < col; i++){
            vector<char> test;
            for(int j = 0; j < strs.size(); j++) test.push_back(strs[j][i]);
            if(check(test) == false) cnt += 1;
        }
        return cnt;
    }
};