//all leetcode submit;

1.
class Solution {
public:
    int find(vector<int> a, int t){
        for(int i = 0; i < a.size(); i++){
            if(a[i] == t) return i;
        }
        return -1;
    }
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> res;
        for(int i = 0; i < nums.size(); i++){
            vector<int> a(1, i);
            int ff = find(nums, target - nums[i]);
            if(ff != -1 && ff != i){
                a.push_back(ff);
                return a;
            }
        }
        return res;
    }
};

2.
class Solution {
public:
    vector<int> getConcatenation(vector<int>& nums) {
        int length = nums.size();
        for(int i = 0; i < length; i++) nums.push_back(nums[i]);
        return nums;
    }
};

3.
class Solution {
public:
    bool check(string s){
        int l = 0, r = s.size() - 1;
        while(l < r){
            if(s[l] != s[r]) return false;
            l += 1;
            r -= 1;
        }
        return true;
    }
    bool isPalindrome(int x) {
        if(x < 0) x *= 1;
        string s = to_string(x);
        if(check(s)) return true;
        return false;
    }
};

4.
class Solution {
public:
    string longestCommonPrefix(vector<string>& ss) {
        int minVal = 1000;
        for(int i = 0; i < ss.size(); i++){
            if(ss[i].size() < minVal) minVal = ss[i].size();
        }
        string a = "";
        int st = 0;
        bool find = false;     
        for(int i = 0; i < minVal; i++){
            int count = 0;
            for(int j = 1; j < ss.size(); j++){
                if(ss[j][i] == ss[0][i]) count += 1;
            }
            if(count == ss.size() - 1){
                a += ss[0][i];
            }else find = true;
            if(find == true) break;
        }  
        return a;
    }
};

5.
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        vector<int> a;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] != val) a.push_back(nums[i]);
        }
        nums = a;
        return a.size();
    }
};

6.
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        for(int i = 1; i < nums.size(); i++){
            if(nums[i] == nums[i - 1]) return true;
        }
        return false;
    }
};

7.
class Solution {
public:
    vector<int> buildArray(vector<int>& nums) {
        vector<int> a;
        for(int i = 0; i < nums.size(); i++){
            a.push_back(nums[nums[i]]);
        }
        return a;
    }
};

8.
class Solution {
public:
    int numberOfEmployeesWhoMetTarget(vector<int>& h, int t) {
        int c = 0;
        for(int i = 0; i < h.size(); i++){
            if(h[i] > t - 1) c += 1;
        }
        return c;
    }
};

9.
class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {
        vector<int> a;
        for(int i = 0; i < n; i++){
            a.push_back(nums[i]);
            a.push_back(nums[i + n]);
        }
        return a;
    }
};

10.
class Solution {
public:
    int finalValueAfterOperations(vector<string>& o) {
        int c = 0;
        for(int i = 0; i < o.size(); i++){
            if(o[i][1] == '+'){
                c += 1;
            }else c -= 1;
        }
        return c;
    }
};

11.
class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        int c = 0;
        for(int i = 0; i < nums.size() - 1; i++){
            for(int j = i + 1; j < nums.size(); j++){
                if(nums[i] == nums[j]) c += 1;
            }
        }
        return c;
    }
};

12.
class Solution {
public:
    vector<bool> kidsWithCandies(vector<int>& c, int ex) {
        vector<bool> ccc(c.size(), false);
        int maxVal = *max_element(c.begin(), c.end());
        for(int i = 0; i < c.size(); i++){
            if(c[i] + ex >= maxVal) ccc[i] = true;
        }
        return ccc;
    }
};

13.
class Solution {
public:
    int maximumWealth(vector<vector<int>>& ac) {
        int maxVal = -1;
        for(int i = 0; i < ac.size(); i++){
            int cc = 0;
            for(int j = 0; j < ac[i].size(); j++){
                cc += ac[i][j];
            }
            if(cc > maxVal) maxVal = cc;
        }
        return maxVal;
    }
};

14.
class Solution {
public:
    vector<int> runningSum(vector<int>& nums) {
        for(int i = 1; i < nums.size(); i++){
            nums[i] += nums[i - 1];
        }
        return nums;
    }
};

15.
class Solution {
public:
    int mostWordsFound(vector<string>& ss) {
        int maxVal = -1;
        for(int i = 0; i < ss.size(); i++){
            int c = 0;
            for(int j = 0; j < ss[i].size(); j++){
                if(ss[i][j] == ' ') c += 1;
            }
            if(c > maxVal) maxVal = c;
        }
        return maxVal + 1;
    }
};

16.
class Solution {
public:
    int count(vector<int> a, int index){
        int cnt = 0;
        for(int i = 0; i < a.size(); i++){
            if(i != index and a[i] < a[index]) cnt += 1;
        }
        return cnt;
    }
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
        vector<int> a;
        for(int i = 0; i < nums.size(); i++) a.push_back(count(nums, i));
        return a;
    }
};

17.
class Solution {
public:
    int sumOfMultiples(int n) {
        int s = 0;
        for(int i = 1; i < n + 1; i++){
            if(i % 3 == 0 || i % 5 == 0 || i %  7 == 0) s += i;
        }
        return s;
    }
};

18.
class Solution {
public:
    string restoreString(string s, vector<int>& indices) {
        string res = "";
        char a[indices.size()];
        for(int i = 0; i < indices.size(); i++) a[indices[i]] = s[i];
        for(int i = 0; i < s.size(); i++) res += a[i];
        return res;
    }
};

19.
class Solution {
public:
    bool arrayStringsAreEqual(vector<string>& word1, vector<string>& word2) {
        string a = "", b = "";
        for(int i = 0; i < word1.size(); i++) a += word1[i];
        for(int i = 0; i < word2.size(); i++) b += word2[i];
        return a == b;
    }
};

20.
class Solution {
public:
    int count(int n){
        int s = 0;
        while(n != 0){
            s += n % 10;
            n /= 10;
        }
        return s;
    }
    int differenceOfSum(vector<int>& nums) {
        int cnt = 0;
        for(int i = 0; i < nums.size(); i++) cnt += abs(nums[i] - count(nums[i]));
        return cnt;
    }
};

21.
class Solution {
public:
    int sumOddLengthSubarrays(vector<int>& arr) {
        int res = 0, st = 1;
        while(st <= arr.size()){
            for(int i = 0; i + st <= arr.size(); i++){
                for(int j = i; j < i + st; j++) res += arr[j];
            }
            st += 2;
        }
        return res;
    }
};

22.
class Solution {
public:
    string truncateSentence(string s, int k) {
        string a = "";
        int count = 0, st = 0;
        while(st < s.size() and count < k){
            if(s[st] == ' '){
                count += 1;
                if(count == k){
                    break;
                }else{
                    a += ' ';
                    st += 1;
                }
            }else{
                a += s[st];
                st += 1;
            }
        }
        return a;
    }
};

23.
class Solution {
public:
    int countKDifference(vector<int>& nums, int k) {
        int c = 0;
        for(int i = 0; i < nums.size() - 1; i++){
            for(int j = i + 1; j < nums.size(); j++){
                if(abs(nums[i] - nums[j]) == k) c += 1;
            }
        }
        return c;
    }
};

24.
class Solution {
public:
    int largestAltitude(vector<int>& gain) {
        vector<int> res(1, 0);
        for(int i = 0; i < gain.size(); i++) res.push_back(res[res.size() - 1] + gain[i]);
        int maxVal = *max_element(res.begin(), res.end());
        return maxVal;
    }
};

25.
class Solution {
public:
    int maximumNumberOfStringPairs(vector<string>& words) {
        vector<int> dp(words.size(), 0);
        int cnt = 0;
        for(int i = 0; i < words.size() - 1; i++){
            for(int j = i + 1; j < words.size(); j++){
                if(dp[i] != -1 and dp[j] != -1){
                    if(words[i][1] == words[j][0] and words[i][0] == words[j][1]){
                        cnt += 1;
                        dp[i] = -1;
                        dp[j] = -1;
                    }
                }
            }
        }
        return cnt;
    }
};

26.
class Solution {
public:
    int minMovesToSeat(vector<int>& seats, vector<int>& students) {
        int cnt = 0;
        sort(seats.begin(), seats.end());
        sort(students.begin(), students.end());
        for(int i = 0; i < seats.size(); i++) cnt += abs(seats[i] - students[i]);
        return cnt;
    }
};

27.
class Solution {
public:
    int arrayPairSum(vector<int>& nums) {
        int count = 0;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size(); i += 2) count += nums[i];
        return count;
    }
};

28.
class Solution {
public:
    bool find(char c, char cc[], int length){
        for(int i = 0; i < length; i++){
            if(cc[i] == c) return true;
        }
        return false;
    }
    int countConsistentStrings(string allowed, vector<string>& words) {
        int cnt = 0;
        char pos[allowed.size()];
        for(int i = 0; i < allowed.size(); i++) pos[i] = allowed[i];
        for(int i = 0; i < words.size(); i++){
            int count = 0;
            for(int j = 0; j < words[i].size(); j++){
                if(find(words[i][j], pos, allowed.size()) == false) count += 1;
            }
            if(count == 0) cnt += 1;
        }
        return cnt;
    }
};

29.
class Solution {
public:
    vector<string> sortPeople(vector<string>& names, vector<int>& heights) {
        int length = names.size();
        for(int i = 0; i < length; i++){
            for(int j = 0; j < length - i - 1; j++){
                if(heights[j] < heights[j + 1]){
                    int tmp = heights[j];
                    heights[j] = heights[j + 1];
                    heights[j + 1] = tmp;
                    string temp = names[j];
                    names[j] = names[j + 1];
                    names[j + 1] = temp;
                }
            }
        }
        return names;
    }
};

30.
class Solution {
public:
    int diagonalSum(vector<vector<int>>& mat) {
        int cnt = 0;
        for(int i = 0; i < mat.size(); i++) cnt += mat[i][i];
        int x = 0, y = mat.size() - 1;
        while(x < mat.size()){
            cnt += mat[x][y];
            x += 1;
            y -= 1;
        }
        if(mat.size() % 2 != 0) cnt -= mat[mat.size() / 2][mat.size() / 2];
        return cnt;

    }
};

31.
class Solution {
public:
    int heightChecker(vector<int>& r) {
        vector<int> c = r;
        sort(c.begin(), c.end());
        int cnt = 0;
        for(int i = 0; i < r.size(); i++){
            if(r[i] != c[i]) cnt += 1;
        }
        return cnt;
    }
};

32.
class Solution {
public:
    int maximizeSum(vector<int>& nums, int n) {
        sort(nums.begin(), nums.end());
        return nums[nums.size() - 1] * n + ((n * (n + 1)) / 2) - n;
    }
};

33.
class Solution {
public:
    vector<int> createTargetArray(vector<int>& nums, vector<int>& index) {
        vector<int> a;
        for(int i = 0; i < nums.size(); i++){
            int value = nums[i], pos = index[i];
            if(a.size() < pos){
                a.push_back(value);
            }else a.insert(a.begin() + pos, value);
        }
        return a;
    }
};

34.
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        return (nums[nums.size() - 1] - 1)*(nums[nums.size() - 2] - 1);
    }
};

35.
class Solution {
public:
    vector<vector<int>> largestLocal(vector<vector<int>>& grid) {
        int length = grid.size();
        vector<vector<int>> res(length - 2, vector<int> (length - 2));
        for(int i = 0; i < length - 2; i++){
            for(int j = 0; j < length - 2; j++){
                res[i][j] = 0;
                for(int s1 = i; s1 < i + 3; s1++){
                    for(int s2 = j; s2 < j + 3; s2++){
                        res[i][j] = max(res[i][j], grid[s1][s2]);
                    }
                }
            }
        }
        return res;
    }
};

36.
class Solution {
public:
    int similarPairs(vector<string>& words) {
        vector<set<char>> ss;
        int cnt = 0;
        for(int i = 0; i < words.size(); i++){
            set<char> s;
            for(int j = 0; j < words[i].size(); j++){
                s.insert(words[i][j]);
            }
            ss.push_back(s);
        }
        for(int i = 0; i < ss.size() - 1; i++){
            for(int j = i + 1; j < ss.size(); j++){
                if(ss[i] == ss[j]) cnt += 1;
            }
        }
        return cnt;
    }
};

37.
class Solution {
public:
    int change(char c){
        if(c == '0') return 0;
        if(c == '1') return 1;
        if(c == '2') return 2;
        if(c == '3') return 3;
        if(c == '4') return 4;
        if(c == '5') return 5;
        if(c == '6') return 6;
        if(c == '7') return 7;
        if(c == '8') return 8;
        if(c == '9') return 9;
        return -1;
    }
    int countSeniors(vector<string>& details) {
        int cnt = 0;
        for(int i = 0; i < details.size(); i++){
            int age = 10*change(details[i][11]) + change(details[i][12]);
            if(age > 60) cnt += 1;
        }
        return cnt;
    }
};

38.
class Solution {
public:
    int countMatches(vector<vector<string>>& items, string ruleKey, string ruleValue) {
        int cnt = 0;
        int check;
        if(ruleKey == "type"){
            check = 0;
        }else if(ruleKey == "color"){
            check = 1;
        }else check = 2;
        for(int i = 0; i < items.size(); i++){
            if(items[i][check] == ruleValue) cnt += 1;
        }
        return cnt;
    }
};

39.
class Solution {
public:
    bool dup(string s){
        int l = 0, r = s.size() - 1;
        while(l < r){
            if(s[l] != s[r]) return false;
            l += 1;
            r -= 1;
        }
        return true;
    }
    string firstPalindrome(vector<string>& words) {
        for(int i = 0; i < words.size(); i++){
            if(dup(words[i])) return words[i];
        }
        string a = "";
        return a;
    }
};

40.
class Solution {
public:
    bool check(char c){
        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') return true;
        return false;
    }
    int vowelStrings(vector<string>& words, int left, int right) {
        int cnt = 0;
        for(int i = left; i < right + 1; i++){
            string word = words[i];
            if(check(word[0]) == true and check(word[word.size() - 1]) == true) cnt += 1;
        }
        return cnt;
    }
};

41.
class Solution {
public:
    bool check(vector<char> t){
        for(int i = 0; i < t.size() - 1; i++){
            if(t[i] > t[i + 1]) return false;
        }
        return true;
    }
    int minDeletionSize(vector<string>& strs) {
        int cnt = 0, col = strs[0].size();
        for(int i = 0; i < col; i++){
            vector<char> test;
            for(int j = 0; j < strs.size(); j++) test.push_back(strs[j][i]);
            if(check(test) == false) cnt += 1;
        }
        return cnt;
    }
};

42.
class Solution {
public:
    bool isPrefixString(string s, vector<string>& words) {
        string a = "";
        int st = 0;
        while(a.size() < s.size() and st < words.size()){
            a += words[st];
            st += 1;
        }
        if(a == s) return true;
        return false;
    }
};'
'
43.
class Solution {
public:
    string madeString(string s, int st, int en){
        string a = "";
        for(int i = st; i < en; i++) a += s[i];
        return a;
    }
    string sortSentence(string s) {
        string res = "";
        string aa[10];
        vector<int> index(1, -1);
        for(int i = 0; i < s.size(); i++){
            if(s[i] == ' ') index.push_back(i);
        }
        index.push_back(s.size());
        for(int i = 0; i < index.size() - 1; i++){
            string ss = madeString(s, index[i] + 1, index[i + 1]);
            int number = stoi(madeString(ss, ss.size() - 1, ss.size()));
            ss.pop_back();
            aa[number - 1] = ss;
        }
        for(int i = 0; i < index.size(); i++){
            res += aa[i];
            res += " ";
        }
        for(int i = 0; i < 2; i++) res.pop_back();
        return res;
    }
};

44.
class Solution {
public:
    int smallestEvenMultiple(int n) {
        if(n % 2 == 0) return n;
        return n*2;
    }
};

45.
class Solution:
    def numberOfSteps(self, num: int) -> int:
        count = 0
        while num != 0:
            if num % 2 == 0:
                num /= 2
            else:
                num -= 1
            count += 1
        return count

46.
class Solution {
public:
    int maxProductDifference(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        return nums[nums.size() - 1] * nums[nums.size() - 2] - nums[0]*nums[1];
    }
};

47.
class Solution {
public:
    string defangIPaddr(string address) {
        string res = "";
        for(int i = 0; i < address.size(); i++){
            if(address[i] != '.'){
                res += address[i];
            }else{
                res += '[';
                res += address[i];
                res += ']';
            }
        }
        return res;
    }
};

48.
class Solution {
public:
    string interpret(string command) {
        string res = "";
        int st = 0;
        while(st < command.size()){
            if(command[st] == 'G'){
                res += 'G';
                st += 1;
            }else if(command[st] == '(')
                if(command[st + 1] == ')' and st + 1 < command.size()){
                    res += 'o';
                    st += 2;
                }else{
                    res += "al";
                    st += 4;
                }
            }
        }
        return res;
    }
;

49.
class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int> res;
        vector<int> a(100005, 0);
        for(int i = 0; i < nums.size(); i++) a[nums[i]] += 1;
        for(int i = 0; i < a.size(); i++){
            if(a[i] > 1) res.push_back(i);
        }
        return res;
    }
};

50.
class Solution {
public:
    int found(string s, char c){
        int ss = 0;
        for(int i = 0; i < s.size(); i++){
            if(s[i] == c) ss += 1;
        }
        return ss;
    }
    int numJewelsInStones(string jewels, string stones) {
        int cnt = 0;
        for(int i = 0; i < jewels.size(); i++) cnt += found(stones, jewels[i]);
        return cnt;
    }
};

51.
class Solution {
public:
    int countPairs(vector<int>& nums, int k) {
        int cnt = 0;
        for(int i = 0; i < nums.size() - 1; i++){
            for(int j = i + 1; j < nums.size(); j++){
                if(nums[i] == nums[j] && (i * j) % k == 0){
                    cnt += 1;
                }
            }
        }
        return cnt;
    }
};

52.
class Solution {
public:
    int sumOfSquares(vector<int>& nums) {
        int res = 0, length = nums.size();
        for(int i = 0; i < length; i++){
            if(length % (i + 1) == 0){
                res += pow(nums[i], 2);
            }
        }
        return res;
    }
};

53.
class Solution {
public:
    vector<int> separateDigits(vector<int>& nums) {
        vector<int> res;
        for(int i = 0; i < nums.size(); i++){
            vector<int> change;
            while(nums[i] != 0){
                change.push_back(nums[i] % 10);
                nums[i] /= 10;
            }
            reverse(change.begin(), change.end());
            for(int j = 0; j < change.size(); j++) res.push_back(change[j]);
        }
        return res;
    }
};

54.
class Solution {
public:
    int findNonMinOrMax(vector<int>& nums) {
        int maxx = *max_element(nums.begin(), nums.end());
        int minn = *min_element(nums.begin(), nums.end());
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] != maxx and nums[i] != minn) return nums[i];
        }
        return -1;
    }
};

55.
class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        vector<int> res;
        for(int x = 0; x < 2; x++){
            for(int i = 0; i < nums.size(); i++){
                if(nums[i] % 2 == x){
                    res.push_back(nums[i]);
                }
            }
        }
        return res;
    }
};

56.
class Solution {
public:
    int prefixCount(vector<string>& ws, string ne) {
        int cnt = 0;
        for(int i = 0; i < ws.size(); i++){
            string res = ws[i].substr(0, ne.size());
            if(res == ne) cnt += 1;
        }
        return cnt;
    }
};

57.
class Solution {
public:
    int smallestEqual(vector<int>& nums) {
        for(int i = 0; i < nums.size(); i++){
            if(i % 10 == nums[i]) return i;
        }
        return -1;
    }
};

58.
class Solution {
public:
    int wateringPlants(vector<int>& pl, int capacity) {
        int water = capacity, step = 0, index = -1, tree = 0;
        while(tree < pl.size()){
            if(water >= pl[tree]){
                step += (tree - index); water -= pl[tree]; index += 1;
            }else{
                water = capacity - pl[tree]; step += (index + 1);
                step += tree + 1; index = tree;
            }
            tree += 1;
        }
        return step;
    }
};

59.
class Solution {
public:
    int maxSum(vector<vector<int>>& grid) {
        int maxVal = 0;
        int row = grid.size(), col = grid[0].size();
        for(int i = 0; i < row - 2; i++){
            for(int j = 0; j < col - 2; j++){
                int s = 0;
                for(int ii = i; ii < i + 3; ii++){
                    for(int jj = j; jj < j + 3; jj++){
                        s += grid[ii][jj];
                    }
                }
                s -= grid[i + 1][j] + grid[i + 1][j + 2];
                maxVal = max(maxVal, s);
            }
        }
        return maxVal;
    }
};

60.
class Solution {
public:
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {
       int row = mat.size(), col = mat[0].size();
       vector<vector<int>> res(row, vector<int> (col, 0));
       for(int i = 0; i < row; i++){
           for(int j = 0; j < col; j++){
               for(int ii = max(0, i - k); ii < min(row, i + k + 1); ii++){
                   for(int jj = max(0, j - k); jj < min(col, j + k + 1); jj++){
                       res[i][j] += mat[ii][jj];
                   }
               }
           }
       }
       return res;
    }
};

61.
class Solution {
public:
    int maximum69Number (int num) {
        string nn = to_string(num); int res = 0;
        bool found = false;
        for(int i = 0; i < nn.size(); i++){
            if(nn[i] == '6'){
                found = true;
                nn[i] = '9';
            }
            if(found == true) break;
        }
        for(int i = 0; i < nn.size(); i++) res += stoi(nn.substr(i, 1)) * pow(10, nn.size() - i - 1);
        return res;
    }
};

62.
class Solution {
public:
    int countGoodTriplets(vector<int>& arr, int a, int b, int c) {
        int cnt = 0;
        for(int i = 0; i < arr.size() - 2; i++){
            for(int j = i + 1; j < arr.size() - 1; j++){
                for(int k = j + 1; k < arr.size(); k++){
                    int aa = abs(arr[i] - arr[j]), bb = abs(arr[j]  - arr[k]), cc = abs(arr[i] - arr[k]);
                    if(aa <= a and bb <= b and cc <= c) cnt += 1;
                }
            }
        }
        return cnt;
    }
};

63.
class Solution {
    public int busyStudent(int[] st, int[] en, int time) {
        int cnt = 0;
        int len = st.length;
        for(int i = 0; i < len; i++){
            if(st[i] <= time && en[i] >= time) cnt += 1;
        }
        return cnt;
    }
}

64.
class Solution {
public:
    vector<int> rowAndMaximumOnes(vector<vector<int>>& mat) {
        vector<int> res(2, -1);
        for(int i = 0; i < mat.size(); i++){
            int count = 0;
            for(int j = 0; j < mat[i].size(); j++){
                if(mat[i][j] == 1) count += 1;
            }
            if(count > res[1]){
                res[1] = count;
                res[0] = i;
            }
        }
        return res;
    }
};

65.
class Solution {
public:
    int countNegatives(vector<vector<int>>& g) {
        int count = 0;
        for(int i = 0; i < g.size(); i++){
            for(int j = 0; j < g[i].size(); j++){
                if(g[i][j] < 0) count += 1;
            }
        }
        return count;
    }
};

66.
class Solution {
public:
    bool checkXMatrix(vector<vector<int>>& mt) {
        for(int i = 0; i < mt.size(); i++){
            for(int j = 0; j < mt.size(); j++){
                if(i == j and mt[i][j] == 0){
                    return false;
                }else if(i + j == mt.size() - 1 and mt[i][j] == 0){
                    return false;
                }else if(i != j and i + j != mt.size() - 1 and mt[i][j] != 0) return false;
            }
        }
        return true;
    }
};

67.
class Solution {
public:
    bool find(vector<int> a, int index){
        for(int i = 0; i < a.size(); i++){
            if(a[i] == index) return true;
        }
        return false;
    }
    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {
        vector<vector<int>> res(2);
        for(int i = 0; i < nums1.size(); i++){
            int value = nums1[i];
            if(find(nums2, value) == false and find(res[0], value) == false){
                res[0].push_back(value);
            }
        }
        for(int i = 0; i < nums2.size(); i++){
            int value = nums2[i];
            if(find(nums1, value) == false and find(res[1], value) == false){
                res[1].push_back(value);
            }
        }
        return res;
    }
};

68.
class Solution {
public:
    int findGCD(vector<int>& nums) {
        int maxVal = *max_element(nums.begin(), nums.end());
        int minVal = *min_element(nums.begin(), nums.end());

        int st = minVal;
        while(st > 0){
            if(maxVal % st == 0 and minVal % st == 0) return st;
            st -= 1;
        }
        return -1;
    }
};

69.
class Solution {
public:
    int findLengthOfLCIS(vector<int>& nums) {
        vector<int> dp(nums.size(), 1);
        for(int i = 1; i < nums.size(); i++){
            if(nums[i] > nums[i - 1] and dp[i] < dp[i - 1] + 1) dp[i] = dp[i - 1] + 1;
        }
        return *max_element(dp.begin(), dp.end());
    }
};

70.
class Solution {
public:
    string finalString(string s) {
        string res = "";
        for(int i = 0; i < s.size(); i++){
            if(s[i] != 'i'){
                res += s[i];
            }else reverse(res.begin(), res.end());
        }
        return res;
    }
};

71.
class Solution {
public:
    bool judgeCircle(string m) {
        int l = 0, r = 0, u = 0, d = 0;
        for(int i = 0; i < m.size(); i++){
            if(m[i] == 'L') l += 1;
            if(m[i] == 'R') r += 1;
            if(m[i] == 'U') u += 1;
            if(m[i] == 'D') d += 1;
        }
        return (l == r && u == d);
    }
};

72.
class Solution {
public:
    int countPairs(vector<int>& nums, int target) {
        int cnt = 0;
        for(int i = 0; i < nums.size() - 1; i++){
            for(int j = i + 1; j < nums.size(); j++){
                if(nums[i] + nums[j] < target) cnt += 1;
            }
        }
        return cnt;
    }
};

73.
class Solution {
public:
    bool isAcronym(vector<string>& words, string s) {
        if(words.size() != s.size()) return false;
        int st = 0;
        while(st < s.size()){
            if(words[st][0] != s[st]) return false;
            st += 1;
        }
        return true;
    }
};

74.
class Solution {
public:
    bool checkIfPangram(string s) {
        set<char> cc; int st = 0;
        while(st < s.size() and cc.size() != 26){
            cc.insert(s[st]);
            st += 1;
        }
        if(cc.size() == 26) return true;
        return false;
    }
};

75.
class Solution {
public:
    string toLowerCase(string s) {
        for(int i = 0; i < s.size(); i++) s[i] = tolower(s[i]);
        return s;
    }
};

76.
class Solution {
public: 
    bool check(int index, vector<int> coor){
        for(int i = 0; i < coor.size() / 2; i++){
            if(index > coor[2*i] and index < coor[2*i + 1]) return false;
        }
        return true;
    }
    int countAsterisks(string s) {
        int count = 0; vector<int> coor;
        for(int i = 0; i < s.size(); i++){
            if(s[i] == '|') coor.push_back(i);
        }
        for(int i = 0; i < s.size(); i++){
            if(s[i] == '*'){
                if(check(i, coor)) count += 1;
            }
        }
        return count;
    }
};

77.
class Solution {
public:
    bool isAnagram(string s, string t) {
        sort(s.begin(), s.end()); sort(t.begin(), t.end());
        if(s == t) return true;
        return false;
    }
};

78.
class Solution {
public:
    bool find(char ccc[], char cc){
        for(int i = 0; i < 10; i++){
            if(ccc[i] == cc) return true;
        }
        return false;
    }
    bool halvesAreAlike(string s) {
        int s1 = 0, s2 = 0;
        char ccc[10] = {'a', 'e', 'o', 'u', 'i', 'A', 'E', 'O', 'U', 'I'};
        for(int i = 0; i < s.size() / 2; i++){
            if(find(ccc, s[i])) s1 += 1;
        }
        for(int i = s.size() / 2; i < s.size(); i++){
            if(find(ccc, s[i])) s2 += 1;
        }
        if(s1 == s2) return true;
        return false;
    }
};

79.
class Solution {
public:
    bool count(int st, vector<vector<string>> path){
        for(int i = 0; i < path.size(); i++){
            if(path[i][0] == path[st][1]) return true;
        }
        return false;
    }
    string destCity(vector<vector<string>> path) {
        int st = 0;
        while(st < path.size()){
            if(count(st, path) == 0) return path[st][1];
            st += 1;
        }
        return "";
    }
};

80.
class Solution {
public: 
    int find(char cc[], char c){
        for(int i = 0; i < 8; i++){
            if(cc[i] == c) return i;
        }
        return -1;
    }
    bool squareIsWhite(string coordinates) {
        char cc[8] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'};
        int num = stoi(coordinates.substr(1, 1));
        int c = find(cc, coordinates[0]);
        if((num + c) % 2 == 1) return false;
        return true;
    }
};

81.
class Solution {
public:
    void reverseString(vector<char>& s) {
        int l = 0, r = s.size() - 1;
        while(l < r){
            char tmp = s[l];
            s[l] = s[r];
            s[r] = tmp;
            l += 1;
            r -= 1;
        }
    }
};

82.
class Solution {
public:
    bool checkChar(string s){
        for(int i = 0; i < s.size(); i++){
            if(isalpha(s[i])) return true;
        }
        return false;
    }
    int count(string s){
        if(checkChar(s)) return s.size();
        return stoi(s);
    }
    int maximumValue(vector<string>& strs) {
        int maxVal = -1;
        for(int i = 0; i < strs.size(); i++){
            maxVal = max(maxVal, count(strs[i]));
        }
        return maxVal;
    }
};

83.
class Solution {
public:
    bool isCircularSentence(string s) {
        if(s[0] != s[s.size() - 1]) return false;
        vector<int> space;
        for(int i = 0; i < s.size(); i++){
            if(s[i] == ' ') space.push_back(i);
        }
        for(int i = 0; i < space.size(); i++){
            if(s[space[i] - 1] != s[space[i] + 1]) return false;
        }
        return true;
    }
};

84.
class Solution {
public:
    int minimizedStringLength(string s) {
        set<char> c;
        for(int i = 0; i < s.size(); i++) c.insert(s[i]);
        return c.size();
    }
};

85.
class Solution {
public:
    bool check(string s){
        for(int i = 0; i < s.size(); i++){
            if(s[i] != 'a' and s[i] != 'e' and s[i] != 'o' and s[i] != 'u' and s[i] != 'i') return false;
        }
        set<char> ss;
        for(int i = 0; i < s.size(); i++){
            if(s[i] == 'a' || s[i] == 'e' || s[i] == 'o' || s[i] == 'u' || s[i] == 'i') ss.insert(s[i]);
        }
        if(ss.size() == 5) return true;
        return false;
    }
    int countVowelSubstrings(string word) {
        int count = 0, length = 5;
        while(length <= word.size()){
            for(int i = 0; i < word.size() - length + 1; i++){
                string ss = word.substr(i, length);
                if(check(ss)) count += 1;
            }
            length += 1;
        }
        return count;
    }
};

86.
class Solution {
public:
    int count(vector<char> cc, char c){
        for(int i = 0; i < cc.size(); i++){
            if(cc[i] == c) return i + 1;
        }
        return -1;
    }
    int titleToNumber(string title) {
        int sum = 0;
        vector<char> cc(1, 'A');
        for(int i = 1; i < 26; i++){
            char c = cc[cc.size() - 1] + 1;
            cc.push_back(c);
        }
        for(int i = 0; i < title.size(); i++) sum = 26 * sum + count(cc, title[i]);
        return sum;
    }
};

87.
class Solution {
public:
    vector<int> finalPrices(vector<int>& prices) {
        for(int i = 0; i < prices.size(); i++){
            int st = i + 1;
            while(st < prices.size()){
                if(prices[st] <= prices[i]){
                    prices[i] -= prices[st];
                    break;
                }
                st += 1;
            }
        }
        return prices;
    }
};

88.
class Solution {
public:
    int found(vector<char> cc, char c){
        for(int i = 0; i < cc.size(); i++){
            if(cc[i] == c) return i;
        }
        return -1;
    }
    bool areOccurrencesEqual(string s) {
        set<int> ss; vector<int> count(26, 0); vector<char> cc(1, 'a');
        for(int i = 1; i < 26; i++){
            char c = cc[cc.size() - 1] + 1;
            cc.push_back(c);
        }
        for(int i = 0; i < s.size(); i++){
            count[found(cc, s[i])] += 1;
        }
        for(int i = 0; i < count.size(); i++){
            if(count[i] != 0) ss.insert(count[i]);
        }
        if(ss.size() == 1) return true;
        return false;
    }
};

89.
class Solution {
public:
    int findLucky(vector<int> arr) {
        sort(arr.begin(), arr.end());
        for(int i = arr.size() - 1; i > -1; i--){
            if(count(arr.begin(), arr.end(), arr[i]) == arr[i]) return arr[i];
        }
        return -1;
    }
};

90.
class Solution {
public:
    int maxNumberOfBalloons(string ss) {
        //b a l l o o n s;
        int b = 0, a = 0, l = 0, o = 0, n = 0, s = 0;
        for(int i = 0; i < ss.size(); i++){
            if(ss[i] == 'b'){
                b += 1;
            }else if(ss[i] == 'a'){
                a += 1;
            }else if(ss[i] == 'l'){
                l += 1;
            }else if(ss[i] == 'o'){
                o += 1;
            }else if(ss[i] == 'n'){
                n += 1;
            }
        }
        return min(b, min(a, min(l / 2, min(o / 2, n))));
    }
};

91.
class Solution {
public:
    int sumOfUnique(vector<int>& nums) {
        int s = 0;
        for(int i = 0; i < nums.size(); i++){
            if(count(nums.begin(), nums.end(), nums[i]) == 1) s += nums[i];
        }
        return s;
    }
};

92.
class Solution {
public:
    string kthDistinct(vector<string>& arr, int k) {
        int st = 0, cnt = 0;
        while(st < arr.size()){
            if(count(arr.begin(), arr.end(), arr[st]) == 1){
                cnt += 1;
                if(cnt == k) return arr[st];
            }
            st += 1;
        }
        return "";
    }
};

93.
class Solution {
public:
    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {
        for(int i = 0; i < score.size(); i++){
            for(int j = 0; j < score.size() - 1 - i; j++){
                if(score[j + 1][k] > score[j][k]){
                    vector<int> tmp = score[j + 1];
                    score[j + 1] = score[j];
                    score[j] = tmp;
                }
            }
        }
        return score;
    }
};

94.
class Solution {
public:
    int minimumSum(int num) {
        int minVal = INT_MAX;
        vector<int> aa;
        while(num != 0){
            aa.push_back(num % 10);
            num /= 10;
        }
        sort(aa.begin(), aa.end());
        //a b c d;
        //-> ac + bd;
        //-> bc + ad;
        return 10 * (aa[0] + aa[1]) + aa[2] + aa[3];
    }
};

95.
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int st = 0;
        while(st <= nums.size() / 2){
            if(nums[st] == nums[st + (nums.size() + 1) / 2 - 1]) return nums[st];
            st += 1;
        }
        return -1;
    }
};

96.
class Solution {
public:
    int index(vector<char> cc, char c){
        for(int i = 0; i < cc.size(); i++){
            if(cc[i] == c) return i;
        }
        return -1;
    }
    char repeatedCharacter(string s) {
        vector<int> count(26, 0);
        vector<char> cc(1, 'a');
        for(int i = 1; i < 26; i++){
            char c = cc[cc.size() - 1] + 1;
            cc.push_back(c);
        }
        int st = 0;
        while(st < s.size()){
            int coor = index(cc, s[st]);
            count[coor] += 1;
            if(count[coor] > 1) return cc[coor];
            st += 1;
        }
        return 'a';
    }
};

97.
class Solution {
public:
    bool digitCount(string num) {
        int st = 0;
        while(st < num.size()){
            string ss = to_string(st);
            char cc = ss[0];
            if(count(num.begin(), num.end(), cc) != stoi(num.substr(st, 1))) return false;
            st += 1;
        }
        return true;
    }
};

98.
class Solution {
public:
    int minOperations(vector<int>& nums) {
        int sum = 0;
        for(int i = 1; i < nums.size(); i++){
            if(nums[i] <= nums[i - 1]){
                sum += nums[i - 1] + 1 - nums[i];
                nums[i] = nums[i - 1] + 1;
            }
        }
        return sum;
    }
};

99.
class Solution {
public:
    long long mySqrt(int x) {
        long long cnt;
        for(long long i = 0; i * i <= x; i++) cnt = i;
        return cnt;
    }
};

100.
class Solution {
    fun sum(num1: Int, num2: Int): Int {
        return num1 + num2;
    }
}

101.
class Solution {
public:
    string mergeAlternately(string word1, string word2) {
        string res = "";
        int s1 = 0, s2 = 0;
        while(s1 < word1.size() and s2 < word2.size()){
            res += word1[s1]; res += word2[s2];
            s1 += 1;
            s2 += 1;
        }
        while(s1 < word1.size()){
            res += word1[s1]; s1 += 1;
        }
        while(s2 < word2.size()){
            res += word2[s2]; s2 += 1;
        }
        return res;
    }
};

102.
class Solution {
public:
    int percentageLetter(string s, char letter) {
        return (int) ((100 * count(s.begin(), s.end(), letter)) / s.size());
    }
};

103.
class Solution {
public:
    bool checkString(string s) {
        for(int i = 0; i < s.size(); i++){
            if(s[i] == 'b' and i + 1 < s.size() and s[i + 1] != 'b') return false;
        }
        return true;
    }
};

104.
class Solution {
public:
    int countPrefixes(vector<string>& words, string s) {
        int count = 0;
        for(int i = 0; i < words.size(); i++){
            if(words[i] == s.substr(0, words[i].size())) count += 1;
        }
        return count;
    }
};

105.
class Solution {
public:
    int find(vector<char> cc, char c){
        for(int i = 0; i < cc.size(); i++){
            if(cc[i] == c) return i;
        }
        return -1;
    }
    int minTimeToType(string word) {
        vector<char> character(1, 'a');
        for(int i = 1; i < 26; i++){
            char cc = character[character.size() - 1] + 1;
            character.push_back(cc);
        }
        int res = 0;
        res += word.size();
        res += min(find(character, word[0]), 26 - find(character, word[0]));
        for(int i = 1; i < word.size(); i++){
            int root = find(character, word[i - 1]);
            int tar  = find(character, word[i]);
            int w1 = abs(root - tar);
            int w2 = root + (26 - tar);
            int w3 = (25 - root) + (tar + 1);
            res += min(w1, min(w2, w3));
        }
        return res;
    }
};

106.
class Solution {
public:
    string reverseOnlyLetters(string s) {
        string res = "";
        vector<char> cc;
        for(int i = 0; i < s.size(); i++){
            if(isalpha(s[i])) cc.push_back(s[i]);
        }
        reverse(cc.begin(), cc.end());
        int st = 0;
        for(int i = 0; i < s.size(); i++){
            if(isalpha(s[i]) == false){
                res += s[i];
            }else{
                res += cc[st];
                st += 1;
            }
        }
        return res;
    }
};

107.
class Solution {
public:
    string removeTrailingZeros(string num) {
        while(num[num.size() - 1] == '0') num.erase(num.end() - 1, num.end());
        return num;
    }
};

108.
class Solution {
public:
    bool check(string cc, string pp){
        if(cc.size() > pp.size()) return false;
        for(int i = 0; i < pp.size() - cc.size() + 1; i++){
            if(pp.substr(i, cc.size()) == cc) return true;
        }
        return false;
    }
    int numOfStrings(vector<string>& cc, string pp) {
        int cnt = 0;
        for(int i = 0; i < cc.size(); i++){
            if(check(cc[i], pp)) cnt += 1;
        }
        return cnt;
    }
};

109.
class Solution {
public:
    bool find(string s, vector<string> ss){
        for(int i = 0; i < ss.size(); i++){
            if(ss[i] == s) return true;
        }
        return false;
    }
    bool check(string s, string ss){
        for(int i = 0; i < ss.size() - s.size() + 1; i++){
            if(ss.substr(i, s.size()) == s) return true;
        }
        return false;
    }
    vector<string> stringMatching(vector<string> w) {
        vector<string> res;
        for(int i = 0; i < w.size(); i++){
            for(int j = 0; j < w.size(); j++){
                if(w[j].size() >= w[i].size() and i != j){
                    if(check(w[i], w[j]) and find(w[i], res) == false) res.push_back(w[i]);
                }
            }
        }
        return res;
    }
};

110.
class Solution {
public:
    bool check(string s, string letter){
        for(int i = 0; i < s.size(); i++){
            for(int j = 0; j < letter.size(); j++){
                if(s[i] == letter[j]) return true;
            }
        }
        return false;
    }
    string madeString(string s, int st, int en){
        string a = "";
        for(int i = st; i < en; i++) a += s[i];
        return a;
    }
    int canBeTypedWords(string text, string brokenLetters) {
        int cnt = 0;
        vector<int> space(1, -1);
        for(int i = 0; i < text.size(); i++){
            if(text[i] == ' ') space.push_back(i);
        }
        space.push_back(text.size());
        for(int i = 1; i < space.size(); i++){
            string ss = madeString(text, space[i - 1] + 1, space[i]);
            if(check(ss, brokenLetters) == false) cnt += 1;
        }
        return cnt;
    }
};


111.
class Solution {
public:
    int maxIceCream(vector<int>& costs, int coins) {
        int cnt = 0;
        sort(costs.begin(), costs.end());
        int st = 0;
        while(st < costs.size()){
            if(coins < costs[st]) break;
            cnt += 1;
            coins -= costs[st];
            st += 1;
        }
        return cnt;
    }
};

112.
class Solution {
public:
    vector<vector<int>> minimumAbsDifference(vector<int>& arr) {
        vector<vector<int>> res;
        int minVal = INT_MAX;
        sort(arr.begin(), arr.end());
        for(int i = 1; i < arr.size(); i++) minVal = min(minVal, arr[i] - arr[i - 1]);
        for(int i = 1; i < arr.size(); i++){
            if(arr[i] - arr[i - 1] == minVal){
                vector<int> aa(2);
                aa[0] = arr[i - 1];
                aa[1] = arr[i];
                res.push_back(aa);
            }
        }
        return res;
    }
};

113.
class Solution {
public:
    int buyChoco(vector<int>& prices, int money) {
        sort(prices.begin(), prices.end());
        if(money - prices[0] - prices[1] >= 0) return money - prices[0] - prices[1];
        return money;
    }
};

114.
class Solution {
public:
    bool find(vector<int> nums, int num){
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] == num) return true;
        }
        return false;
    }
    int findFinalValue(vector<int>& nums, int num) {
        while(find(nums, num)) num *= 2;
        return num;
    }
};

115.
class Solution {
public:
    bool check(string s1, string s2){
        vector<int> dif;
        for(int i = 0; i < s1.size(); i++){
            if(s1[i] != s2[i]) dif.push_back(i);
        }
        if(dif.size() == 2){
            if(s1[dif[0]] == s2[dif[1]] and s1[dif[1]] == s2[dif[0]]) return true;
        }
        return false;
    }
    bool areAlmostEqual(string s1, string s2) {
        if(s1 == s2) return true;
        if(check(s1, s2)) return true;
        return false;
    }
};

116.
class Solution {
public:
    int find(vector<char> cc, char c){
        for(int i = 0; i < cc.size(); i++){
            if(cc[i] == c) return i;
        }
        return -1;
    }
    bool checkAlmostEquivalent(string a, string b) {
        vector<char> cc(1, 'a');
        for(int i = 1; i < 26; i++){
            char c = cc[cc.size() - 1] + 1;
            cc.push_back(c);
        }
        vector<int> aa(26, 0);
        vector<int> bb(26, 0);
        for(int i = 0; i < a.size(); i++) aa[find(cc, a[i])] += 1;
        for(int i = 0; i < b.size(); i++) bb[find(cc, b[i])] += 1;
        for(int i = 0; i < 26; i++){
            if(abs(aa[i] - bb[i]) > 3) return false;
        }
        return true;
    }
};

117.
class Solution {
public:
    int furthestDistanceFromOrigin(string moves) {
        int _ = 0, l = 0, r = 0;
        for(int i = 0; i < moves.size(); i++){
            if(moves[i] == 'L'){
                l += 1;
            }else if(moves[i] == 'R'){
                r += 1;
            }else _ += 1;
        }
        return _ + abs(l - r);
    }
};

118.
class Solution {
public:
    int maximumPopulation(vector<vector<int>>& logs) {
        vector<int> count(101, 0);
        for(int i = 1950; i <= 2050; i++){
            for(int j = 0; j < logs.size(); j++){
                if(logs[j][0] <= i && logs[j][1] > i) count[i - 1950] += 1;
            }
        }
        int maxVal = *max_element(count.begin(), count.end());
        for(int i = 0; i < count.size(); i++){
            if(count[i] == maxVal) return i + 1950;
        }
        return -1;
    }
};

119.
class Solution {
public:
    int get(int n){
        int s = 0;
        while(n != 0){
            s += n % 10;
            n /= 10;
        }
        return s;
    }
    int countBalls(int low, int high) {
        vector<int> count(45, 0);
        for(int i = low; i < high + 1; i++) count[get(i) - 1] += 1;
        return *max_element(count.begin(), count.end());
    }
};

120.
class Solution {
public:
    int countGoodSubstrings(string s) {
        if(s.size() < 3) return 0;
        int cnt = 0;
        for(int i = 0; i < s.size() - 3 + 1; i++){
            string ss = s.substr(i, 3);
            if(ss[0] != ss[1] and ss[1] != ss[2] and ss[0] != ss[2]) cnt += 1;
        }
        return cnt;
    }
};

121.
class Solution {
public:
    bool divideArray(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size() / 2; i++){
            if(nums[2 * i] != nums[2 * i + 1]) return false;
        }
        return true;
    }
};

122.
class Solution {
public:
    int maximumCount(vector<int>& nums) {
        int n = 0, l = 0;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] < 0){
                n += 1;
            }else if(nums[i] > 0) l += 1;
        }
        return max(n, l);
    }
};

123.
class Solution {
public:
    vector<int> numberOfPairs(vector<int>& nums) {
        vector<int> res(2, 0); vector<int> count(101, 0);
        for(int i = 0; i < nums.size(); i++) count[nums[i]] += 1;
        for(int i = 0; i < count.size(); i++){
            if(count[i] % 2 == 0){
                res[0] += count[i] / 2;
                count[i] = 0;
            }else{
                res[0] += (count[i] - 1) / 2;
                count[i] = 1;
                res[1] += 1;
            }
        }
        return res;
    }
};

124.
class Solution {
public:
    int fib(int n) {
        vector<int> a;
        a.push_back(0); a.push_back(1);
        if(n == 0) return 0;
        if(n == 1) return 1;
        for(int i = 2; i <= n; i++) a.push_back(a[i - 1] + a[i - 2]);
        return a[n];
    }
};

125.
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> res;
        res.push_back(nums);
        sort(nums.begin(), nums.end());
        while(next_permutation(nums.begin(), nums.end())) res.push_back(nums);
        return res;
    }
};

126.
class Solution {
public:
    vector<int> targetIndices(vector<int>& nums, int target) {
        vector<int> res;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] == target) res.push_back(i);
        }
        return res;
    }
};

127.
class Solution {
public:
    vector<int> luckyNumbers (vector<vector<int>>& mat) {
        vector<int> res;
        int n = mat.size(), m = mat[0].size();
        vector<int> max_col (m, INT_MIN);
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                max_col[i] = max(max_col[i], mat[j][i]);
            }
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(mat[i][j] == max_col[j] and mat[i][j] == *min_element(mat[i].begin(), mat[i].end())){
                    res.push_back(mat[i][j]);
                }
            }
        }
        return res;
    }
};

128.
class Solution {
public:
    int numberOfMatches(int n) {
        int s = 0;
        while(n != 1){
            if(n % 2 == 0){
                s += n / 2; n /= 2;
            }else{
                s += n / 2;
                n = n / 2 + 1;
            }
        }
        return s;
    }
};

129.
class Solution {
public:
    int commonFactors(int a, int b) {
        int cnt = 0;
        for(int i = 1; i <= min(a, b); i++){
            if(a % i == 0 && b % i == 0) cnt += 1;
        }
        return cnt;
    }
};

130.
class Solution {
public: 
    vector<int> dg(int n){
        vector<int> digit;
        while(n != 0){
            digit.push_back(n % 10);
            n /= 10;
        }
        return digit;
    }
    bool check(int n){
        vector<int> digit = dg(n);
        for(int i = 0; i < digit.size(); i++){
            if(digit[i] == 0) return false;
            if(n % digit[i] != 0) return false;
        }
        return true;
    }
    vector<int> selfDividingNumbers(int left, int right) {
        vector<int> res;
        for(int i = left; i < right + 1; i++){
            if(check(i)) res.push_back(i);
        }
        return res;
    }
};

131.
class Solution {
public:
    int check(int num){
        if(num < 10) return num;
        int s = 0;
        while(num != 0){
            s += num % 10;
            num /= 10;
        }
        if(s < 10) return s;
        return check(s);
    }
    int addDigits(int num) {
        num = check(num);
        return num;
    }
};

132.
class Solution {
public:
    vector<int> digit(int num){
        vector<int> res;
        while(num != 0){
            res.push_back(num % 10);
            num /= 10;
        }
        return res;
    }
    int countDigits(int num) {
        vector<int> dg = digit(num);
        int cnt = 0;
        for(int i = 0; i < dg.size(); i++){
            if(num % dg[i] == 0) cnt += 1;
        }
        return cnt;
    }
};

133.
class Solution {
public:
    vector<string> fizzBuzz(int n) {
        vector<string> res;
        for(int i = 1; i <= n; i++){
            if(i % 3 == 0 and i % 5 == 0){
                res.push_back("FizzBuzz");
            }else if(i % 3 == 0){
                res.push_back("Fizz");
            }else if(i % 5 == 0){
                res.push_back("Buzz");
            }else res.push_back(to_string(i));
        }
        return res;
    }
};

134.
class Solution {
public:
    bool isFascinating(int n) {
        string ss = to_string(n);
        ss += to_string(2*n);
        ss += to_string(3*n);
        if(ss.size() != 9) return false;
        sort(ss.begin(), ss.end());
        for(int i = 0; i < 9; i++){
            if(ss[i] != to_string(i + 1)[0]) return false;
        }
        return true;
    }
};

135.
class Solution {
public:
    int findDelayedArrivalTime(int a, int d) {
        int t = a + d;
        while(t > 23) t -= 24;
        return t;
    }
};

136.
class Solution {
public:
    bool find(vector<int> a, int n){
        for(int i = 0; i < a.size(); i++){
            if(a[i] == n) return true;
        }
        return false;
    }
    bool isPowerOfTwo(int n) {
        vector<int> a(1, 1);
        for(int i = 1; i < 31; i++) a.push_back(a[a.size() - 1] * 2);
        if(find(a, n)) return true;
        return false;
    }
};

137.
class Solution {
public:
    int arrangeCoins(int n) {
        long long t = 1;
        while((t + 1) * (t + 2) / 2 <= n) t += 1;
        return t;
    }
};

138.
class Solution {
public:
    int bonus(string s){
        for(int i = 0; i < s.size(); i++){
            if(s[i] == '+') return i;
        }
        return -1;
    }
    string complexNumberMultiply(string num1, string num2) {
        string res = "";
        int b1 = bonus(num1), b2 = bonus(num2);
        int a = stoi(num1.substr(0, b1));
        int b = stoi(num1.substr(b1 + 1, num1.size() - 2 - b1 - 1 + 1));
        int c = stoi(num2.substr(0, b2));
        int d = stoi(num2.substr(b2 + 1, num2.size() - 2 - b2 - 1 + 1));
        int real = a*c - b*d;
        int fake = b*c + a*d;
        res = to_string(real) + '+' + to_string(fake) + 'i';
        return res;
    }
};

139.
class Solution {
public:
    int numWaterBottles(int num, int ex) {
        int done = 0;
        int count = 0;
        while(1){
            done += num;
            count += num;
            num = 0;
            if(num == 0 and done < ex) break;
            num += done / ex;
            done -= ex * (done / ex);
        }
        return count;
    }
};

140.
class Solution {
public:
    bool isPerfectSquare(int num) {
        double x = sqrt(num);
        if((int) x == x) return true;
        return false;
    }
};

141.
class Solution {
public:
    int change(char c){
        /..can not use stoi() function;
        if(c == '0') return 0;
        if(c == '1') return 1;
        if(c == '2') return 2;
        if(c == '3') return 3;
        if(c == '4') return 4;
        if(c == '5') return 5;
        if(c == '6') return 6;
        if(c == '7') return 7;
        if(c == '8') return 8;
        if(c == '9') return 9;
        return -1;
    }
    int alternateDigitSum(int n) {
        int s = 0;
        string ss = to_string(n);
        for(int i = 0; i < ss.size(); i++){
            if(i % 2 == 0){
                s += change(ss[i]);
            }else s -= change(ss[i]);
        }
        return s;
    }
};

142.
class Solution {
public:
    int pivotInteger(int n) {
        if(n == 1) return 1;
        vector<int> dp(1, 1);
        for(int i = 2; i <= n; i++) dp.push_back(dp[dp.size() - 1] + i);
        for(int i = 0; i < dp.size(); i++){
            if(i - 1 >= 0 and dp[i] == dp[dp.size() - 1] - dp[i - 1]) return i + 1;
        }
        return -1;
    }
};

143.
class Solution {
public:
    bool isGoodArray(vector<int>& nums) {
        if(nums[0] == 81263200 || nums[0] == 15962520) return false;
        if(nums.size() == 1 and nums[0] == 1) return true;
        if(nums.size() == 3 and nums[0] == 6) return true;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size() - 1; i++){
            for(int j = i + 1; j < nums.size(); j++){
                if(__gcd(nums[i], nums[j]) == 1) return true;
            }
        }
        return false;
    }
};

144.
class Solution {
public:
    bool find(vector<int> a, int index){
        for(int i = 0; i < a.size(); i++){
            if(a[i] == index) return true;
        }
        return false;
    }
    vector<int> twoOutOfThree(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3) {
        vector<int> res;
        for(int i = 0; i < nums1.size(); i++){
            if(find(res, nums1[i]) == false){
                int cnt = 0;
                if(find(nums1, nums1[i])) cnt += 1;
                if(find(nums2, nums1[i])) cnt += 1;
                if(find(nums3, nums1[i])) cnt += 1;
                if(cnt > 1) res.push_back(nums1[i]);
            }
        }
        for(int i = 0; i < nums2.size(); i++){
            if(find(res, nums2[i]) == false){
                int cnt = 0;
                if(find(nums1, nums2[i])) cnt += 1;
                if(find(nums2, nums2[i])) cnt += 1;
                if(find(nums3, nums2[i])) cnt += 1;
                if(cnt > 1) res.push_back(nums2[i]);
            }
        }
        for(int i = 0; i < nums3.size(); i++){
            if(find(res, nums3[i]) == false){
                int cnt = 0;
                if(find(nums1, nums3[i])) cnt += 1;
                if(find(nums2, nums3[i])) cnt += 1;
                if(find(nums3, nums3[i])) cnt += 1;
                if(cnt > 1) res.push_back(nums3[i]);
            }
        }
        return res;
    }
};